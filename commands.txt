每个机器都必须自报家门：你的名字和Email地址
git config --global user.name "AmyLingJs"
git config --global user.email "lingjs90@163.com"

创建一个版本库
cd e:
cd e:/heyGit
mkdir learngit
cd learngit
pwd
git init

把一个文件放到新建的版本库
git add readme.txt
git commit -m "wrote a readme file"

修改readme.txt 查看仓库当前状态
git status

查看readme.txt具体被修改内容
git diff readme.txt

修改之后提交 2步
git add readme.txt 添加到暂存区
git commit -m "some changes"

查看修改历史记录
git log
或者git log --pretty=oneline

回退到上一个版本
git reset --hard HEAD^
当前版本HEAD 上上个版本HEAD^^
回退到某个版本
git reset --hard commitid
commitid可通过git reflog获取到

查看文件内容
cat readme.txt

每次修改，如果不add到暂存区，那就不会加入到commit中

撤销工作区修改
git checkout -- readme.txt
撤销暂存区修改
先git reset HEAD readme.txt 然后git checkout -- readme.txt

删除文件
rm "test.txt"
从版本库删除
git rm test.txt
git commit -m "remove test.txt"

连接远程库
git remote add origin git@github.com:AmyLingJs/fullStack1.git
第一次将本地库内容推送到远程
git push -u origin master
之后推送
git push origin master

从远程库克隆
git clone git@github.com:AmyLingJs/gitskills.git

查看分支
git branch 
创建分支
git branch branchName
切换分支
git checkout branchName
创建+切换
git branch -b branchName
合并某分支到当前分支
git merge branchName
删除分支
git branch -d branchName

解决冲突
cat readme.txt 查看内容 合并冲突部分
git branch master
git add readme.txt
git commit -m "conflict fixed"
查看分支合并情况
git log --graph --pretty=oneline --abbrev-commit
或者git log --graph

合并分支
git merge --no-ff -m "merge with no-ff" dev
--no-ff参数，表示禁用Fast forward
加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

bug分支
在当前工作的dev分支上：git stash 把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git checkout master
git checkout -b issue-101...
作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看
git stash pop
恢复的同时把stash内容也删了

强制删除未合并分支
git branch -D branchName

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签